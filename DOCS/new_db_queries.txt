-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.book_genres
(
    book_id integer NOT NULL,
    genre_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT book_genres_pkey PRIMARY KEY (book_id, genre_id)
);

CREATE TABLE IF NOT EXISTS public.books
(
    book_id serial NOT NULL,
    book_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    author_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    publication_year integer,
    isbn character varying(20) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT books_pkey PRIMARY KEY (book_id),
    CONSTRAINT books_isbn_key UNIQUE (isbn)
);

CREATE TABLE IF NOT EXISTS public.books_users
(
    id serial NOT NULL,
    book_id integer NOT NULL,
    owner_id integer NOT NULL,
    availability_status enum_books_users_availability_status NOT NULL DEFAULT 'Available'::enum_books_users_availability_status,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT books_users_pkey PRIMARY KEY (id),
    CONSTRAINT books_users_book_id_owner_id_key UNIQUE (book_id, owner_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    user_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    registration_number integer NOT NULL,
    email_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(300) COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_id_key UNIQUE (email_id),
    CONSTRAINT users_registration_number_key UNIQUE (registration_number)
);

CREATE TABLE IF NOT EXISTS public.refresh_tokens
(
    token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    expires_at timestamp with time zone,
    is_valid boolean DEFAULT true,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT refresh_tokens_pkey PRIMARY KEY (token)
);

CREATE TABLE IF NOT EXISTS public.books_exchanged
(
    exchange_id serial NOT NULL,
    borrower_id integer NOT NULL,
    lender_id integer NOT NULL,
    book_id integer NOT NULL,
    status enum_books_exchanged_status NOT NULL DEFAULT 'Pending'::enum_books_exchanged_status,
    request_date timestamp with time zone,
    borrow_date timestamp with time zone,
    returned_date timestamp with time zone,
    due_date timestamp with time zone,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT books_exchanged_pkey PRIMARY KEY (exchange_id)
);

CREATE TABLE IF NOT EXISTS public.genres
(
    genre_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT genres_pkey PRIMARY KEY (genre_id),
    CONSTRAINT genres_name_key UNIQUE (name)
);

ALTER TABLE IF EXISTS public.book_genres
    ADD CONSTRAINT book_genres_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (book_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.book_genres
    ADD CONSTRAINT book_genres_genre_id_fkey FOREIGN KEY (genre_id)
    REFERENCES public.genres (genre_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.books_users
    ADD CONSTRAINT books_users_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (book_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.books_users
    ADD CONSTRAINT books_users_owner_id_fkey FOREIGN KEY (owner_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.refresh_tokens
    ADD CONSTRAINT refresh_tokens_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.books_exchanged
    ADD CONSTRAINT books_exchanged_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (book_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.books_exchanged
    ADD CONSTRAINT books_exchanged_borrower_id_fkey FOREIGN KEY (borrower_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.books_exchanged
    ADD CONSTRAINT books_exchanged_lender_id_fkey FOREIGN KEY (lender_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

END;